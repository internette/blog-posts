INTRO

The Goals
This library should be able to stand alone, zero dependencies required. It, the library, should be user friendly, in terms of usability and customization (through CSS). Finally, the focus of a tooltip is always the content, this library being no different.

The Process

Design
I approached the design with 100% customization in mind. I've worked with tooltips a lot at my current job, so I had an understanding of the basic design going into this project. I knew the style of the tooltip should flatter the content without feeling overdone. I chose a simple, recognizable shape for the tooltip and used a standard black (#000) as the default background color. This design approach makes it easier for the user to imagine their design integrated with the tooltip.

As for the animations, I kept them simple. A fade in/fade out approach eases the introduction and removal of the tooltip. The float upwards immediately shows which word or phrase the tooltip is attached to, removing any confusion. The reverse float is expected due to the mentality that an exit is the same as an entrance, but in reverse. You enter through a door, you leave through the same door in the opposite direction. You write words to make them appear while you erase words to do the opposite. 

Development
The development of this library was the hardest. I googled for hours library creation best practices, only to find completely diverse answers. All I knew were my goals and the basic outline of the code, which is based on my original CodePen. After reading a few articles and watching some tutorials, I decided on [Binary Intellect]'s method, which I used as a starting point. 

I became heavily dependent on Github for this project, uploading every time something new worked. I wanted this library's use to be as versatile as possible, so I had to avoid selection methods like "getElementById()" and "getElementByTagName()". I landed on the "querySelectorAll" plus for loop combination. This combination, plus the wrapper function found in [Binary Intellect]'s tutorial led my selection method that resembles that of jQuery, achieving my goal of familiarity.

The Hurdles

The biggest hurdle was learning the prototype method of JavaScript development. Before now, I had never attempted to use this methodology, though I'd seen it everywhere. While the syntax was new, the format made sense due to dabbling a lot in [Object] [Oriented] [JavaScript] on Codepen. 

Another huge hurdle was the removal of all jQuery from the original code. I wanted zero dependencies with my library, so that anyone could use it how they liked. While I've removed jQuery from most of my code recently, I've still held onto the library for certain features, such as AJAX calls. 