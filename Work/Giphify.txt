While editing the post [How to Survive a CMS Migration], my editor Allison Buki recommended that the phrase "zombie horde" should link to a GIF. I liked the approach of using a to add emphasis, but felt that a link based on the phrase wasn't enough. A link would take the reader away from the post, disrupting the reader's flow. I thought of multiple ways to address the GIF idea. I finally landed on a tooltip method. Due to the goal of making my portfolio require zero depedencies, I decided to make my own GIF-based tool tip library, one that could easily be shared and distributed.
 
The Goals
This library should stand alone, meaning zero dependencies required. The library should be HTML tag independent, as to allow for any application, from links to spans. It, the library, should be user friendly and easily customizable (through CSS). Finally, the tooltip should emphasize the content.

The Process

Design
I approached designing the tooltip with complete customization in mind. I've worked with tooltips a lot at my current job, so I understood the basic design going into this project. I knew tooltip styles should flatter the content, not take away from it. For the tooltip design, I chose a simple, recognizable shape and used a standard black (#000) as the default background color. This design approach makes it easier for the user to imagine their design integrated with the tooltip.

As for the animations, I kept them simple. A fade in/fade out approach eases the introduction and removal of the tooltip. The upwards float immediately shows which word or phrase the tooltip is attached to, removing any possible confusion. The reverse float is expected due to the mentality that an exit is the same as an entrance, but in reverse. You enter through a door, you leave through the same door in the opposite direction. You write words to make them appear while you erase words to achieve the opposite effect. 

Development
The development of this library was the hardest. Initially, I built out a functional [CodePen] with the Giphy API to see how I would create the basics. Making the API search query dynamic was the next step. I expanded my CodePen to included a text input, testing how the API and tooltip interacted with live text. After working out some kinks, I moved on to creating my first library that would soon become [Giphify].

I googled for hours library creation best practices, only to find the utmost diverse answers. Going into the process, all I knew were my goals and the basic outline of the code that was based on my CodePen. After reading a few articles and watching some tutorials, I decided on [Binary Intellect]'s method of library creation, which I used as a starting point. 

I became heavily dependent on Github for this project, uploading every time something new worked. I wanted this library's use to be as versatile as possible, so I had to avoid selection methods like "getElementById()" and "getElementByTagName()". I landed on the "querySelectorAll" plus for loop combination. This combination, plus the wrapper function found in [Binary Intellect]'s tutorial led my selection method that resembles that of jQuery, achieving my goal of familiarity.

The Hurdles

The biggest hurdle was learning the prototype method in the JavaScript language. Before now, I had never attempted to use this methodology, though I'd seen it everywhere. While the syntax was new, the format made some sense due to my dabbling in [Object] [Oriented] [JavaScript] on Codepen. I also found converting OOP to the prototype method. This conversion was much more difficult that I originally expect due to how scoping works with prototype.