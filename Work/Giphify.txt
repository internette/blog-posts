INTROThe GoalsThis library should be able to stand alone without any dependencies, while maintaining an easy usability. The tooltip should be easily customizable through CSS. Finally, the focus of a tooltip is always the content, this library being no different.The ProcessDesignI approached the design with easy customization in mind. I've worked with tooltips a lot at my current job, so I have an understanding of the basic design. I knew the style of the tooltip should flatter the content without feeling overdone. I chose a simple, recognizable shape for the tooltip and used a standard black (#000) as the default background color. This design approach allows for the user to imagine their design integrated more easily with the tooltip.As for the animations, I kept them simple. A fade in/fade out approach eases the introduction and removal of the tooltip. The float upwards immediately shows which word the tooltip is attached to, removing any confusion. The reverse float is expected due to the mentality that an exit is the same as an entrance, but reversed. You enter through a door, you leave through a door in the opposite direction. You write words and you erase words. DevelopmentThe development of this library was the hardest part. I googled for hours the library creation protocol, only to find completely diverse answers. All I knew were my goals and the basic outline of the code, based on my original CodePen. After reading a few articles and watching some tutorials, I landed on [Binary Intellect]'s method, which I used as a starting point. I became heavily dependent on Github for this project, uploading every time something new worked. I wanted this library's use to be as versatile as possible, so I had to avoid selection methods like ÒgetElementById()Ó and ÒgetElementByTagName()Ó. I landed on the combination of "querySelectorAll" plus for loop combination.The HurdlesThe biggest hurdle was learning the prototype method of JavaScript development. Before now, I had never attempted to use this methodology, though I'd seen it everywhere. While the syntax was new, the format made sense due to dabbling a lot in [Object] [Oriented] [JavaScript] on Codepen. Another huge hurdle was the removal of all jQuery from the original code. I wanted zero dependencies with my library, so that anyone could use it how they liked. While IÕve removed jQuery from most of my code recently, IÕve still held onto the library for certain features, such as AJAX calls. 